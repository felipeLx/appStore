{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","containers/Auth/Signup.js"],"names":["input","props","inputElement","classes","InputElement","push","Invalid","elementType","elementConfig","value","onChange","changed","type","options","map","option","key","displayValue","className","Input","Label","label","module","exports","spinner","Loader","signup","React","memo","useState","username","placeholder","validation","required","valid","touched","email","isEmail","password","minLength","controls","setControls","buildingProduct","authRedirectPath","onSetSignupRedirectPath","useEffect","submitHandler","event","a","preventDefault","onAuth","response","expirationDate","Date","getTime","localStorage","setItem","_id","console","log","formElementsArray","id","config","form","formElement","invalid","shouldValidate","controlName","updatedControls","updateObject","target","checkValidity","window","alert","inputChangedHandler","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","style","marginTop","paddingTop","paddingLeft","action","onSubmit","btnType","connect","state","token","product","building","signupRedirectPath","dispatch","actions"],"mappings":"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","file":"static/js/5.7ecc4ba6.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n   \n    inputClasses.push(classes.Invalid);\n   \n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                // className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                type='text' />;\n            break;\n        case ( 'number' ):\n            inputElement = <input\n                // className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                type='number' />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                // className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                type='text' />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    // className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                // className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                type='text' />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","import React from 'react';\n\nimport classes from './Spinner.module.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1twK-\",\"load2\":\"Spinner_load2__2gkgc\"};","import React, { useState, useEffect } from 'react';\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n// import api from '../../api/index';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nconst signup = React.memo(props => {\n      \n  const [controls, setControls] = useState({\n    username: {\n      elementType: 'input',\n      elementConfig: {\n          type: 'text',\n          placeholder: 'Username'\n      },\n      value: '',\n      validation: {\n          required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'email',\n            placeholder: 'E-mail'\n        },\n        value: '',\n        validation: {\n            required: true,\n            isEmail: true\n        },\n        valid: false,\n        touched: false\n    },\n    password: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n            required: true,\n            minLength: 6\n        },\n        valid: false,\n        touched: false\n    }\n  });\n\n  \n  const { buildingProduct, authRedirectPath ,onSetSignupRedirectPath } = props;\n\n  useEffect(() => {\n      if ( !buildingProduct && authRedirectPath !== '/' ) {\n        onSetSignupRedirectPath();\n      }\n  }, [buildingProduct, authRedirectPath ,onSetSignupRedirectPath]);\n\n  const inputChangedHandler = ( event, controlName ) => {\n  const updatedControls = updateObject( controls, {\n      [controlName]: updateObject( controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity( event.target.value, controls[controlName].validation ),\n          touched: true\n      } )\n  } );\n    if(controls.username.value === 'admin') {\n        window.alert('Username not allowed');\n        setControls({\n          username: {\n            value: ''\n          }\n        });\n    } else {setControls(updatedControls);}\n  };\n\n  const submitHandler = async( event ) => {\n    event.preventDefault();\n    const response = await props.onAuth(controls.username.value, controls.email.value, controls.password.value);\n    if(!response) {\n      console.log('no fetch data');\n    } else {\n      const expirationDate = new Date().getTime();\n      localStorage.setItem('token', response._id);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', response.email);}\n  };\n\n  const formElementsArray = [];\n  for ( let key in controls ) {\n      formElementsArray.push( {\n          id: key,\n          config: controls[key]\n      } );\n  };\n\n  let form = formElementsArray.map( formElement => (\n      <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={( event ) => inputChangedHandler( event, formElement.id )} />\n  ));\n\n  if ( props.loading ) {\n      form = <Spinner />\n  }\n\n  let errorMessage = null;\n\n  if ( props.error ) {\n      errorMessage = (\n          <p>{props.error.message}</p>\n      );\n  }\n\n  let authRedirect = null;\n  if ( props.isAuthenticated ) {\n      authRedirect = <Redirect to='/' />\n  }\n\n  return (\n    <div className=\"container\">\n      {authRedirect}\n      {errorMessage}\n      <div style={{ marginTop: \"4rem\", paddingTop: \"70px\" }} className=\"row\">\n        <div className=\"col s8 offset-s2\">\n          <Link to=\"/\" className=\"btn-flat waves-effect\">\n            <i className=\"material-icons left\"> </i> Home\n          </Link>\n          <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n            <h4>\n              <b>Registrar</b>\n            </h4>\n            <p className=\"grey-text text-darken-1\">\n              Já tem uma conta? <Link to=\"/user/login\">Login</Link>\n            </p>\n          </div>\n              <form action=\"POST\" onSubmit={submitHandler}>\n                {form}\n                <Button type='submit' btnType=\"Success\">ENVIAR</Button>\n              </form>\n        </div>\n      </div>\n    </div>  \n  );\n});\n\nconst mapStateToProps = state => {\n  return {\n      loading: state.signup.loading,\n      error: state.signup.error,\n      isAuthenticated: state.signup.token !== null,\n      buildingProduct: state.product.building,\n      authRedirectPath: state.signup.signupRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onAuth: ( username, email, password ) => dispatch( actions.signup( username, email, password ) ),\n      onSetSignupRedirectPath: () => dispatch( actions.setSignupRedirectPath( '/' ) )\n  };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps )( signup );"],"sourceRoot":""}