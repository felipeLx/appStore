{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","containers/Auth/Login.js"],"names":["input","props","inputElement","classes","InputElement","push","Invalid","elementType","elementConfig","value","onChange","changed","type","options","map","option","key","displayValue","className","Input","Label","label","module","exports","spinner","Loader","login","React","memo","useState","email","placeholder","validation","required","isEmail","valid","touched","password","minLength","controls","setControls","buildingProduct","authRedirectPath","onSetSignupRedirectPath","useEffect","submitHandler","event","a","preventDefault","onLogin","response","console","log","expirationDate","Date","getTime","token","localStorage","setItem","formElementsArray","id","config","form","formElement","invalid","shouldValidate","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","loading","errorMessage","error","message","authRedirect","isAuthenticated","isAdmin","to","style","marginTop","paddingTop","paddingLeft","action","onSubmit","btnType","connect","state","auth","signup","product","building","signupRedirectPath","dispatch","actions"],"mappings":"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","file":"static/js/4.6935f05b.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n   \n    inputClasses.push(classes.Invalid);\n   \n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                // className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                type='text' />;\n            break;\n        case ( 'number' ):\n            inputElement = <input\n                // className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                type='number' />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                // className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                type='text' />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    // className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                // className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                type='text' />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","import React from 'react';\n\nimport classes from './Spinner.module.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1twK-\",\"load2\":\"Spinner_load2__2gkgc\"};","import React, { useState, useEffect } from 'react';\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\n\nconst login = React.memo(props => {\n  const [controls, setControls] = useState({\n    email: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n        },\n        value: '',\n        validation: {\n            required: true,\n            isEmail: true\n        },\n        valid: false,\n        touched: false\n    },\n    password: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n            required: true,\n            minLength: 6\n        },\n        valid: false,\n        touched: false\n  }\n  });\n\n  const { buildingProduct, authRedirectPath ,onSetSignupRedirectPath } = props;\n\n  useEffect(() => {\n      if ( !buildingProduct && authRedirectPath !== '/' ) {\n        onSetSignupRedirectPath();\n      }\n  }, [buildingProduct, authRedirectPath ,onSetSignupRedirectPath]);\n\n  const inputChangedHandler = ( event, controlName ) => {\n  const updatedControls = updateObject( controls, {\n      [controlName]: updateObject( controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity( event.target.value, controls[controlName].validation ),\n          touched: true\n          })\n      });\n      setControls(updatedControls);\n  };\n\n  const submitHandler = async(event) => {\n    event.preventDefault();\n      try {\n        const response = await props.onLogin( controls.email.value, controls.password.value );\n        console.log(response);\n        \n        const expirationDate = new Date().getTime();\n        const token = expirationDate + response.email;\n        localStorage.setItem('token', token);\n        localStorage.setItem('expirationDate', expirationDate);\n        localStorage.setItem('userId', response.email);\n      } catch(err) {\n        console.log(err);\n      }\n  };\n\n  const formElementsArray = [];\n  for ( let key in controls ) {\n      formElementsArray.push( {\n          id: key,\n          config: controls[key]\n      } );\n  };\n\n  let form = formElementsArray.map( formElement => (\n      <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={( event ) => inputChangedHandler( event, formElement.id )} />\n  ));\n\n  if ( props.loading ) {\n    form = <Spinner />\n  }\n\n  let errorMessage = null;\n\n  if ( props.error ) {\n      errorMessage = (\n          <p>{props.error.message}</p>\n      );\n  }\n\n  let authRedirect = null;\n  if ( props.isAuthenticated || props.isAdmin ) {\n      authRedirect = <Redirect to='/' />\n  }\n\n  return (\n    <div className=\"container\">\n      {authRedirect}\n      {errorMessage}\n\n    <div style={{ marginTop: \"4rem\", paddingTop: \"70px\" }} className=\"row\">\n      <div className=\"col s8 offset-s2\">\n        <Link to=\"/\" className=\"btn-flat waves-effect\">\n          <i className=\"material-icons left\"> </i> Home\n        </Link>\n        <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n          <h4>\n            <b>Login</b>\n          </h4>\n          <p className=\"grey-text text-darken-1\">\n            Ainda não tem uma conta? <Link to=\"/user/signup\">Registrar</Link>\n          </p>\n        </div>\n        <form action=\"POST\" onSubmit={submitHandler}>\n          {form}\n          <Button type='submit' btnType=\"Success\">ENVIAR</Button>\n        </form>\n      </div>\n    </div>\n    </div>\n  );\n});\n\nconst mapStateToProps = state => {\n  return {\n      loading: state.auth.loading,\n      error: state.auth.error,\n      isAuthenticated: state.auth.token !== null || state.signup.token !== null,\n      isAdmin: state.auth.isAdmin,\n      buildingProduct: state.product.building,\n      authRedirectPath: state.signup.signupRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onLogin: ( email, password ) => dispatch( actions.login( email, password ) ),\n      onSetSignupRedirectPath: () => dispatch( actions.setSignupRedirectPath( '/' ) )\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(login);"],"sourceRoot":""}