{"version":3,"sources":["components/Controller/Orders/OrdersController.js"],"names":["ordersController","React","memo","props","useState","ordersList","setOrdersList","useEffect","api","getAllOrders","then","orders","data","catch","err","console","log","editHandler","id","a","updateOrderById","ord","deleteHandler","deleteOrderById","form","map","order","key","_id","className","Body","Text","userId","productId","onClick","event","target","params"],"mappings":"4LAOMA,EAAmBC,IAAMC,MAAK,SAAAC,GAAU,IAAD,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KA8CzCC,qBAAU,WACNC,IAAIC,eACCC,MAAK,SAAAC,GACFL,EAAcK,EAAOC,SAExBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC/B,IAGH,IAAMG,EAAW,uCAAG,WAAMC,GAAN,SAAAC,EAAA,sEACVX,IAAIY,gBAAgBF,GACrBR,MAAK,SAAAW,GAAG,OAAIN,QAAQC,IAAI,aACxBH,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAHd,2CAAH,sDAMXQ,EAAa,uCAAG,WAAMJ,GAAN,SAAAC,EAAA,sEACZX,IAAIe,gBAAgBL,GACzBR,MAAK,SAAAW,GAAG,OAAIN,QAAQC,IAAI,cACxBH,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAHR,2CAAH,sDA2CfU,EAAOnB,EAAWoB,KAAI,SAAAC,GAAK,OAC3B,kBAAC,IAAD,CAAMC,IAAKD,EAAME,IAAKC,UAAU,QAC5B,kBAAC,IAAKC,KAAN,CAAWD,UAAU,aACjB,kBAAC,IAAKE,KAAN,KAAW,uCAAX,IAAiCL,EAAME,KACvC,kBAAC,IAAKG,KAAN,KAAW,2CAAX,IAAqCL,EAAMM,QAC3C,kBAAC,IAAKD,KAAN,KAAW,8CAAX,IAAwCL,EAAMO,YAElD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,QAAS,SAACC,GAAD,OAAWlB,EAAYkB,EAAMC,OAAOC,OAAOnB,KAAKW,UAAU,0BAA3E,QACA,kBAAC,IAAD,CAAQK,QAAS,SAACC,GAAD,OAAWb,EAAca,EAAMC,OAAOC,OAAOnB,KAAKW,UAAU,4BAA7E,eAMZ,OACI,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OAEX,8BACGL,QAQJxB","file":"static/js/9.263a1532.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Card, Button, ButtonGroup } from 'react-bootstrap';\n\nimport api from '../../../api/index';\n// import Input from '../../UI/Input/Input';\n// import { updateObject } from '../../../shared/utility';\n\nconst ordersController = React.memo(props => {\n\n    const [ordersList, setOrdersList] = useState([]);\n    // const [controls, setControls] = useState({\n    //     name: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Nome do produto'\n    //         },\n    //         value: ''\n    //     },\n    //     brand: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Marca'\n    //         },\n    //         value: ''\n    //     },\n    //     category: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Categoria'\n    //         },\n    //         value: ''\n    //     },\n    //     price: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Preço'\n    //         },\n    //         value: ''\n    //     },\n    //     description: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'textarea',\n    //             placeholder: 'Descrição'\n    //         },\n    //         value: ''\n    //     },\n    // });\n    \n    useEffect(() => {\n        api.getAllOrders()\n            .then(orders => {\n                setOrdersList(orders.data);\n            })\n            .catch(err => console.log(err));\n    }, []);\n    \n\n    const editHandler = async(id) => {\n        await api.updateOrderById(id)\n            .then(ord => console.log('edited'))\n            .catch(err => console.log(err))\n    };\n\n    const deleteHandler = async(id) => {\n        await api.deleteOrderById(id)\n        .then(ord => console.log('deleted'))\n        .catch(err => console.log(err))\n    };\n\n    // const createHandler = async() => {\n\n    //     return <p>create new product</p>\n    // };\n\n    // const inputChangedHandler = ( event, controlName ) => {\n    //     const updatedControls = updateObject( controls, {\n    //         [controlName]: updateObject( controls[controlName], {\n    //             value: event.target.value,\n    //             })\n    //         });\n    //         setControls(updatedControls);\n    //     };\n\n    // const submitHandler = ( event ) => {\n    //     event.preventDefault();\n    //     console.log('submitHandler - productsController');\n        \n    // };\n        \n\n    // const formElementsArray = [];\n    // for ( let key in controls ) {\n    //     formElementsArray.push( {\n    //         id: key,\n    //         config: controls[key]\n    //     } );\n    // };\n\n    // let form = formElementsArray.map( formElement => (\n    //     <Input\n    //         key={formElement.id}\n    //         elementType={formElement.config.elementType}\n    //         elementConfig={formElement.config.elementConfig}\n    //         value={formElement.config.value}\n    //         changed={( event ) => inputChangedHandler( event, formElement.id )} />\n    // ));\n    let form = ordersList.map(order => (\n        <Card key={order._id} className=\"card\">\n            <Card.Body className=\"card-body\">\n                <Card.Text><strong>ID:</strong> {order._id}</Card.Text>\n                <Card.Text><strong>UserId:</strong> {order.userId}</Card.Text>\n                <Card.Text><strong>ProductId:</strong> {order.productId}</Card.Text>\n            </Card.Body>\n            <ButtonGroup>\n                <Button onClick={(event) => editHandler(event.target.params.id)} className=\"btn btn-info btn-space\">EDIT</Button>\n                <Button onClick={(event) => deleteHandler(event.target.params.id)} className=\"btn btn-danger btn-space\">DELETE</Button>\n            </ButtonGroup>\n        </Card>\n\n    ));\n\n    return(\n        <div className=\"container\">\n            <div className=\"col\">\n                \n                <form>\n                  {form}\n                </form>\n            </div>\n        </div>\n    );\n    \n});\n\nexport default ordersController;"],"sourceRoot":""}