{"version":3,"sources":["../node_modules/react-bootstrap/esm/ButtonGroup.js","components/Controller/Users/UsersController.js","components/Controller/Orders/OrdersController.js","containers/Dashboard/UserDashboard.js"],"names":["ButtonGroup","React","forwardRef","props","ref","bsPrefix","size","toggle","vertical","className","_props$as","as","Component","rest","_objectWithoutPropertiesLoose","prefix","useBootstrapPrefix","baseClass","createElement","_extends","classNames","displayName","defaultProps","role","usersController","memo","useState","usersList","setUsersList","useEffect","api","getAllUsers","then","users","data","catch","err","console","log","editHandler","id","a","updateUserById","prod","deleteHandler","deleteUserById","form","map","user","key","_id","Body","Text","username","email","orderId","dataCreated","onClick","event","target","params","ordersController","ordersList","setOrdersList","getAllOrders","orders","updateOrderById","ord","deleteOrderById","order","userId","productId","UserDashboard","showOrders","setShowOrders","showUser","setShowUser","Title","variant"],"mappings":"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","file":"static/js/6.40ecbb0b.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  vertical: false,\n  toggle: false,\n  role: 'group'\n};\nvar ButtonGroup = React.forwardRef(function (props, ref) {\n  var bsPrefix = props.bsPrefix,\n      size = props.size,\n      toggle = props.toggle,\n      vertical = props.vertical,\n      className = props.className,\n      _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      rest = _objectWithoutPropertiesLoose(props, [\"bsPrefix\", \"size\", \"toggle\", \"vertical\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  var baseClass = prefix;\n  if (vertical) baseClass = prefix + \"-vertical\";\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classNames(className, baseClass, size && prefix + \"-\" + size, toggle && prefix + \"-toggle\")\n  }));\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import React, { useEffect, useState } from 'react';\nimport { Card, Button, ButtonGroup } from 'react-bootstrap';\n\nimport api from '../../../api/index';\n// import Spinner from '../../UI/Spinner/Spinner';\n// import { updateObject } from '../../../shared/utility';\n\nconst usersController = React.memo(props => {\n\n    const [usersList, setUsersList] = useState([]);\n    // const [controls, setControls] = useState({\n    //     name: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Nome do produto'\n    //         },\n    //         value: ''\n    //     },\n    //     brand: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Marca'\n    //         },\n    //         value: ''\n    //     },\n    //     category: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Categoria'\n    //         },\n    //         value: ''\n    //     },\n    //     price: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Preço'\n    //         },\n    //         value: ''\n    //     },\n    //     description: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'textarea',\n    //             placeholder: 'Descrição'\n    //         },\n    //         value: ''\n    //     },\n    // });\n    \n    useEffect(() => {\n        api.getAllUsers()\n            .then(users => {\n                setUsersList(users.data);\n            })\n            .catch(err => console.log(err));\n    }, []);\n    \n\n    const editHandler = async(id) => {\n        await api.updateUserById(id)\n            .then(prod => console.log('updated'))\n            .catch(err => console.log(err))\n    };\n\n    const deleteHandler = async(id) => {\n        await api.deleteUserById(id)\n        .then(prod => console.log('deleted'))\n        .catch(err => console.log(err))\n    };\n\n    // const createHandler = async() => {\n\n    //     return <p>create new product</p>\n    // };\n\n    // const inputChangedHandler = ( event, controlName ) => {\n    //     const updatedControls = updateObject( controls, {\n    //         [controlName]: updateObject( controls[controlName], {\n    //             value: event.target.value,\n    //             })\n    //         });\n    //         setControls(updatedControls);\n    //     };\n\n    // const submitHandler = ( event ) => {\n    //     event.preventDefault();\n    //     console.log('submitHandler - productsController');\n        \n    // };\n        \n\n    // const formElementsArray = [];\n    // for ( let key in controls ) {\n    //     formElementsArray.push( {\n    //         id: key,\n    //         config: controls[key]\n    //     } );\n    // };\n\n    // let form = formElementsArray.map( formElement => (\n    //     <Input\n    //         key={formElement.id}\n    //         elementType={formElement.config.elementType}\n    //         elementConfig={formElement.config.elementConfig}\n    //         value={formElement.config.value}\n    //         changed={( event ) => inputChangedHandler( event, formElement.id )} />\n    // ));\n\n    let form = usersList.map(user => (\n        <Card key={user._id} className=\"card\">\n            <Card.Body className=\"card-body\">\n                <Card.Text><strong>ID:</strong> {user._id}</Card.Text>\n                <Card.Text><strong>Username:</strong> {user.username}</Card.Text>\n                <Card.Text><strong>Email:</strong> {user.email}</Card.Text>\n                <Card.Text><strong>OrderId:</strong> {user.orderId}</Card.Text>\n                <Card.Text><strong>Date:</strong> {user.dataCreated}</Card.Text>\n            </Card.Body>\n            <ButtonGroup>\n                <Button onClick={(event) => editHandler(event.target.params.id)} className=\"btn btn-info btn-space\">EDIT</Button>\n                <Button onClick={(event) => deleteHandler(event.target.params.id)} className=\"btn btn-danger btn-space\">DELETE</Button>\n            </ButtonGroup>\n                    \n        </Card>\n\n    ));\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <form>\n                  {form}\n                </form>\n            </div>\n        </div>\n    );\n    \n});\n\nexport default usersController;","import React, { useEffect, useState } from 'react';\nimport { Card, Button, ButtonGroup } from 'react-bootstrap';\n\nimport api from '../../../api/index';\n// import Input from '../../UI/Input/Input';\n// import { updateObject } from '../../../shared/utility';\n\nconst ordersController = React.memo(props => {\n\n    const [ordersList, setOrdersList] = useState([]);\n    // const [controls, setControls] = useState({\n    //     name: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Nome do produto'\n    //         },\n    //         value: ''\n    //     },\n    //     brand: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Marca'\n    //         },\n    //         value: ''\n    //     },\n    //     category: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Categoria'\n    //         },\n    //         value: ''\n    //     },\n    //     price: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'text',\n    //             placeholder: 'Preço'\n    //         },\n    //         value: ''\n    //     },\n    //     description: {\n    //         elementType: 'input',\n    //         elementConfig: {\n    //             type: 'textarea',\n    //             placeholder: 'Descrição'\n    //         },\n    //         value: ''\n    //     },\n    // });\n    \n    useEffect(() => {\n        api.getAllOrders()\n            .then(orders => {\n                setOrdersList(orders.data);\n            })\n            .catch(err => console.log(err));\n    }, []);\n    \n\n    const editHandler = async(id) => {\n        await api.updateOrderById(id)\n            .then(ord => console.log('edited'))\n            .catch(err => console.log(err))\n    };\n\n    const deleteHandler = async(id) => {\n        await api.deleteOrderById(id)\n        .then(ord => console.log('deleted'))\n        .catch(err => console.log(err))\n    };\n\n    // const createHandler = async() => {\n\n    //     return <p>create new product</p>\n    // };\n\n    // const inputChangedHandler = ( event, controlName ) => {\n    //     const updatedControls = updateObject( controls, {\n    //         [controlName]: updateObject( controls[controlName], {\n    //             value: event.target.value,\n    //             })\n    //         });\n    //         setControls(updatedControls);\n    //     };\n\n    // const submitHandler = ( event ) => {\n    //     event.preventDefault();\n    //     console.log('submitHandler - productsController');\n        \n    // };\n        \n\n    // const formElementsArray = [];\n    // for ( let key in controls ) {\n    //     formElementsArray.push( {\n    //         id: key,\n    //         config: controls[key]\n    //     } );\n    // };\n\n    // let form = formElementsArray.map( formElement => (\n    //     <Input\n    //         key={formElement.id}\n    //         elementType={formElement.config.elementType}\n    //         elementConfig={formElement.config.elementConfig}\n    //         value={formElement.config.value}\n    //         changed={( event ) => inputChangedHandler( event, formElement.id )} />\n    // ));\n    let form = ordersList.map(order => (\n        <Card key={order._id} className=\"card\">\n            <Card.Body className=\"card-body\">\n                <Card.Text><strong>ID:</strong> {order._id}</Card.Text>\n                <Card.Text><strong>UserId:</strong> {order.userId}</Card.Text>\n                <Card.Text><strong>ProductId:</strong> {order.productId}</Card.Text>\n            </Card.Body>\n            <ButtonGroup>\n                <Button onClick={(event) => editHandler(event.target.params.id)} className=\"btn btn-info btn-space\">EDIT</Button>\n                <Button onClick={(event) => deleteHandler(event.target.params.id)} className=\"btn btn-danger btn-space\">DELETE</Button>\n            </ButtonGroup>\n        </Card>\n\n    ));\n\n    return(\n        <div className=\"container\">\n            <div className=\"col\">\n                \n                <form>\n                  {form}\n                </form>\n            </div>\n        </div>\n    );\n    \n});\n\nexport default ordersController;","import React, { useState } from 'react';\nimport { Card, Button } from 'react-bootstrap';\n\nimport UsersController from '../../components/Controller/Users/UsersController';\nimport OrdersController from '../../components/Controller/Orders/OrdersController';\n\nconst UserDashboard = () => {\n    const [showOrders, setShowOrders] = useState(false);\n    const [showUser, setShowUser] = useState(false);\n\n    const userHandler = () => {\n        setShowUser(!showUser);\n        setShowOrders(false);\n    };\n\n    const ordersHandler = () => {\n        setShowOrders(!showOrders);\n        setShowUser(false);\n    };\n\n    // const createUserHandler = () => {\n    //     console.log('createUserHandler = Dashboard');   \n    // };\n    \n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div  className=\"col-md-4 col-lg-2\">\n                    <Card>\n                        <Card.Title>Meus Pedidos</Card.Title>\n                        <Button onClick={() => ordersHandler()} variant=\"secondary\">Ver</Button>\n                    </Card>\n                </div>\n                <div className=\"col-md-4 col-lg-2\">\n                    <Card>\n                        <Card.Title>Meus dados</Card.Title>\n                        <Button onClick={() => userHandler()} variant=\"primary\">Ver</Button>\n                    </Card>\n                </div>\n            </div>\n            <div className=\"row\">\n                {showUser && <UsersController />}\n            </div>\n            <div className=\"row\">\n                {showOrders && <OrdersController />}\n            </div>\n        </div>\n    );\n};\n\nexport default UserDashboard;"],"sourceRoot":""}